rootProject.name = 'sos'

dependencyResolutionManagement {
  versionCatalogs {
    reactAndroidLibs {
      from(files(new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim(), "../gradle/libs.versions.toml")))
    }
  }
}


def expoPath = ["node", "--print", "require.resolve('expo/package.json')"].execute(null, rootDir).text.trim()
if (expoPath) {
    def autolinkingScript = new File(new File(expoPath).getParentFile(), "scripts/autolinking.gradle")
    if (autolinkingScript.exists()) {
        apply from: autolinkingScript
        useExpoModules()
    } else {
        println "❌ autolinking.gradle não encontrado em: " + autolinkingScript
    }
} else {
    println "❌ Não foi possível resolver expo/package.json"
}


def rnCliPath = ["node", "--print", "require.resolve('@react-native-community/cli-platform-android/package.json')"].execute(null, rootDir).text.trim()
def nativeModulesGradle = new File(new File(rnCliPath).getParentFile(), "native_modules.gradle")

if (nativeModulesGradle.exists()) {
    apply from: nativeModulesGradle
    applyNativeModulesSettingsGradle(settings)
} else {
    println "❌ native_modules.gradle não encontrado em: " + nativeModulesGradle
}

include ':app'
includeBuild(new File(["node", "--print", "require.resolve('@react-native/gradle-plugin/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim()).getParentFile())
