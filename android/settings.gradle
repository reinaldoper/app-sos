rootProject.name = 'sos'


def resolvePackageJsonPath(String packageName) {
    try {
        def output = ["node", "--print", "require.resolve('${packageName}')"]
            .execute([], rootDir)
            .text.trim()
        return output ? new File(output) : null
    } catch (Exception e) {
        println "❌ Erro ao resolver ${packageName}: ${e.message}"
        return null
    }
}

def rnPackage = resolvePackageJsonPath("react-native/package.json")
if (rnPackage) {
    dependencyResolutionManagement {
        versionCatalogs {
            reactAndroidLibs {
                from(files(new File(rnPackage.parentFile, "../gradle/libs.versions.toml")))
            }
        }
    }
} else {
    println "❌ react-native/package.json não encontrado"
}


def expoPackage = resolvePackageJsonPath("expo/package.json")
if (expoPackage) {
    def autolinkingScript = new File(expoPackage.parentFile, "../scripts/autolinking.gradle")
    if (autolinkingScript.exists()) {
        apply from: autolinkingScript
        useExpoModules()
    } else {
        println "❌ autolinking.gradle não encontrado em: ${autolinkingScript}"
    }
} else {
    println "❌ expo/package.json não encontrado"
}


def cliPackage = resolvePackageJsonPath("@react-native-community/cli-platform-android/package.json")
if (cliPackage) {
    def nativeModulesGradle = new File(cliPackage.parentFile, "native_modules.gradle")
    if (nativeModulesGradle.exists()) {
        apply from: nativeModulesGradle
        applyNativeModulesSettingsGradle(settings)
    } else {
        println "❌ native_modules.gradle não encontrado em: ${nativeModulesGradle}"
    }
} else {
    println "❌ CLI do React Native não encontrado"
}


def gradlePluginPackage = resolvePackageJsonPath("@react-native/gradle-plugin/package.json")
if (gradlePluginPackage) {
    includeBuild(gradlePluginPackage.parentFile)
} else {
    println "❌ gradle-plugin/package.json não encontrado"
}


include ':app'
